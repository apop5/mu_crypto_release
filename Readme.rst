============================
Mu Crypto Release Repository
============================

This project behaves like a FW platform. It consists of scripts, pipelines, and submodules to perform
a binary release of EDK2 CryptoPkg drivers to power the BaseCryptOnProtocol/Ppi infrastructure.

These releases will be tagged and tracked in this  repo, but published to the Mu Nuget feed.

This repository is part of Project Mu.  Please see Project Mu for details https://microsoft.github.io/mu

Repo Scripts
============

Here is a brief description of the scripts and how they are used.

CommonBuildSettings.py
----------------------

This script is not to be used directly, but is a configuration module to be consumed by the other scripts
in this repo (or used directly as a Stuart settings module). If any submodules or scopes need to be changed,
this is the place to do it.

Note that any changes to names might require additional changes in other scripts that look for those names
when copying files around.

SingleFlavorBuild.py
--------------------

This script will run an EDK2 build of a single flavor and a single target of CryptBin. Example: ``TINY_SHA,DEBUG`` or
``STANDARD,RELEASE``. This is because a single EDK2 build run requires a single and flavor target and so each run
must be set up independently. This script is called multiple times by the ``MultiFlavorBuild.py`` script.

Should have good support for ``-h`` and print a useful help menu.

MultiFlavorBuild.py
-------------------

This script organizes the build for an entire release by coordinating multiple calls to ``SingleFlavorBuild.py``.
Multiple targets, flavors, and architectures can be passed into this script to be built in sequence. This is the
main entry point for the build from the pipeline and is the ideal entry point for any local builds.

Calling this script without any parameters default to all available targets, architectures, and flavors.

Should have good support for ``-h`` and print a useful help menu.

AssembleNugetPackage.py
-----------------------

This script will take in a directory of build artifacts and reorganize them into the Nuget package layout.

Should have good support for ``-h`` and print a useful help menu.

Building on a Local Dev System
==============================

Building locally for test consists of two main steps:

1) Run the ``MultiFlavorBuild.py`` script to build the drivers, depexes, and other release collateral.
2) Run the ``AssembleNugetPackage.py`` script to organize the release collateral into the format for
   the release package. Just point at the ``Build`` directory as the input directory.

Releasing a Pipeline Build
==========================

TODO
How to support the secure repos?

First Steps (for a new integration)
-----------------------------------

TODO
Check gitmodules and make sure all other repos are passing CI
Branch
Update the pipeline default variables for new branch

Regular Release Steps
---------------------

Check to see whether the Basetools files need to be regenrated
WHEN COMPARING THE NEW AUTOGENERATED FILES, IF ANY NEW FUNCTIONS ARE ADDED (or if any existing family is updated to
add new functions) must look at Crypto.template.h and update the EDKII_CRYPTO_VERSION!!!!

Update to correct branches/commits of submodules


Code of Conduct
===============

This project has adopted the Microsoft Open Source Code of Conduct https://opensource.microsoft.com/codeofconduct/

For more information see the Code of Conduct FAQ https://opensource.microsoft.com/codeofconduct/faq/
or contact `opencode@microsoft.com <mailto:opencode@microsoft.com>`_. with any additional questions or comments.

Contributions
=============

Contributions are always welcome and encouraged!
Please open any issues in the Project Mu GitHub tracker and read https://microsoft.github.io/mu/How/contributing/

Copyright & License
===================

| Copyright (C) Microsoft Corporation
| SPDX-License-Identifier: BSD-2-Clause-Patent
